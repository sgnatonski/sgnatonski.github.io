{"version":3,"sources":["webpack:///./src/pages/touchlesslift/about.tsx","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardDescription.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardHeader.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardMeta.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardGroup.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/Card.js"],"names":["withLayout","featuresDescription","Description","supportDescription","to","vertical","as","name","Content","stackable","verticalAlign","className","Row","Column","width","fluid","header","description","floated","CardDescription","props","children","content","textAlign","classes","rest","getUnhandledProps","ElementType","getElementType","createElement","isNil","handledProps","propTypes","CardHeader","CardMeta","CardContent","extra","meta","val","autoGenerateKey","CardGroup","centered","doubling","items","itemsPerRow","itemsJSX","item","key","join","_Component","Card","_getPrototypeOf2","_this","this","_len","arguments","length","args","Array","_key","call","apply","concat","e","onClick","value","_this$props","color","href","image","link","raised","handleClick","Image","create","defaultProps","ui","wrapped"],"mappings":"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","file":"component---src-pages-touchlesslift-about-tsx-fa75d2ba5f32b84ea1bd.js","sourcesContent":["import * as React from \"react\";\r\nimport { Header, Container, Segment, Icon, Card, Grid } from \"semantic-ui-react\";\r\nimport { Link } from \"gatsby\";\r\nimport { withLayout } from \"../../components/Layout\";\r\n\r\nconst AboutPage = () => {\r\n  const featuresDescription = (\r\n    <Card.Description>\r\n      TouchlessLift allows contactless elevator control, such as destination floor selection or door opening. Works with Bluetooth LE enabled elevators.\r\n    </Card.Description>\r\n  );\r\n  const supportDescription = (\r\n    <Card.Description>\r\n      <Link to=\"/touchlesslift/support\">Support</Link>\r\n    </Card.Description>\r\n  );\r\n  return (\r\n    <Container>\r\n      <Segment vertical>\r\n        <Header as=\"h2\">\r\n          <Icon name=\"info circle\" />\r\n          <Header.Content>\r\n            TouchLessLift\r\n          </Header.Content>\r\n        </Header>\r\n      </Segment>\r\n      <Segment vertical>\r\n        <Grid stackable verticalAlign=\"middle\" className=\"container\">\r\n          <Grid.Row>\r\n            <Grid.Column width=\"8\">\r\n              <Card fluid\r\n                //image={cover}\r\n                header=\"Features\"\r\n                description={featuresDescription}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\" floated=\"right\">\r\n              <Card fluid\r\n                //image={cover}\r\n                header=\"Support\"\r\n                description={supportDescription}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withLayout(AboutPage);\r\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a description with one or more paragraphs.\n */\n\nfunction CardDescription(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'description', className);\n  var rest = getUnhandledProps(CardDescription, props);\n  var ElementType = getElementType(CardDescription, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardDescription.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardDescription.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardDescription;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a header.\n */\n\nfunction CardHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(CardHeader, props);\n  var ElementType = getElementType(CardHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card header can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain content metadata.\n */\n\nfunction CardMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'meta', className);\n  var rest = getUnhandledProps(CardMeta, props);\n  var ElementType = getElementType(CardMeta, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardMeta.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card meta can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardMeta;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useWidthProp } from '../../lib';\nimport Card from './Card';\n/**\n * A group of cards.\n */\n\nfunction CardGroup(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      doubling = props.doubling,\n      items = props.items,\n      itemsPerRow = props.itemsPerRow,\n      stackable = props.stackable,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(doubling, 'doubling'), useKeyOnly(stackable, 'stackable'), useTextAlignProp(textAlign), useWidthProp(itemsPerRow), 'cards', className);\n  var rest = getUnhandledProps(CardGroup, props);\n  var ElementType = getElementType(CardGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  var itemsJSX = _map(items, function (item) {\n    var key = item.key || [item.header, item.description].join('-');\n    return React.createElement(Card, _extends({\n      key: key\n    }, item));\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), itemsJSX);\n}\n\nCardGroup.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"content\", \"doubling\", \"items\", \"itemsPerRow\", \"stackable\", \"textAlign\"];\nCardGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A group of cards can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A group of cards can double its column width for mobile. */\n  doubling: PropTypes.bool,\n\n  /** Shorthand array of props for Card. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A group of cards can set how many cards should exist in a row. */\n  itemsPerRow: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A group of cards can automatically stack rows to a single columns on mobile devices. */\n  stackable: PropTypes.bool,\n\n  /** A card group can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardGroup;","import \"core-js/modules/es6.string.link\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\nimport Image from '../../elements/Image';\nimport CardContent from './CardContent';\nimport CardDescription from './CardDescription';\nimport CardGroup from './CardGroup';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card displays site content in a manner similar to a playing card.\n */\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      var onClick = _this.props.onClick;\n      if (onClick) onClick(e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          centered = _this$props.centered,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          content = _this$props.content,\n          description = _this$props.description,\n          extra = _this$props.extra,\n          fluid = _this$props.fluid,\n          header = _this$props.header,\n          href = _this$props.href,\n          image = _this$props.image,\n          link = _this$props.link,\n          meta = _this$props.meta,\n          onClick = _this$props.onClick,\n          raised = _this$props.raised;\n      var classes = cx('ui', color, useKeyOnly(centered, 'centered'), useKeyOnly(fluid, 'fluid'), useKeyOnly(link, 'link'), useKeyOnly(raised, 'raised'), 'card', className);\n      var rest = getUnhandledProps(Card, this.props);\n      var ElementType = getElementType(Card, this.props, function () {\n        if (onClick) return 'a';\n      });\n\n      if (!childrenUtils.isNil(children)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), children);\n      }\n\n      if (!childrenUtils.isNil(content)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), content);\n      }\n\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), Image.create(image, {\n        autoGenerateKey: false,\n        defaultProps: {\n          ui: false,\n          wrapped: true\n        }\n      }), (description || header || meta) && React.createElement(CardContent, {\n        description: description,\n        header: header,\n        meta: meta\n      }), extra && React.createElement(CardContent, {\n        extra: true\n      }, extra));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\n_defineProperty(Card, \"Content\", CardContent);\n\n_defineProperty(Card, \"Description\", CardDescription);\n\n_defineProperty(Card, \"Group\", CardGroup);\n\n_defineProperty(Card, \"Header\", CardHeader);\n\n_defineProperty(Card, \"Meta\", CardMeta);\n\n_defineProperty(Card, \"handledProps\", [\"as\", \"centered\", \"children\", \"className\", \"color\", \"content\", \"description\", \"extra\", \"fluid\", \"header\", \"href\", \"image\", \"link\", \"meta\", \"onClick\", \"raised\"]);\n\nexport { Card as default };\nCard.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A Card can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A Card can be formatted to display different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** Shorthand for primary content of CardContent. */\n  extra: customPropTypes.contentShorthand,\n\n  /** A Card can be formatted to take up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: PropTypes.string,\n\n  /** A card can contain an Image component. */\n  image: customPropTypes.itemShorthand,\n\n  /** A card can be formatted to link to other content. */\n  link: PropTypes.bool,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /**\n   * Called on click. When passed, the component renders as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /** A Card can be formatted to raise above the page. */\n  raised: PropTypes.bool\n} : {};"],"sourceRoot":""}